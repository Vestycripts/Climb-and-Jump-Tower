local Euna = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Euna:CreateWindow({
   Name = "EUNA HUB",
   LoadingTitle = "EUNA HUB",
   LoadingSubtitle = "By: Eunaa",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "ZIRP Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Euna may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Euna to get the key from
      Key = {"Hotdog"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("ü§´ Secret", nil) -- Title, Image
local Shop = Window:CreateTab("üè™ Shop", nil) -- Title, Image
local Misc = Window:CreateTab("‚öôÔ∏è Misc", nil) -- Title, Image

Euna:Notify({
   Title = "Executed Successfully!",
   Content = "Press X to Turn ON",
   Duration = 8.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
         print("The user tapped Okey!")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Mutation Esp",
   Callback = function()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Lurnai = {}
Lurnai.LocalPlayer = Players.LocalPlayer
Lurnai.PlayerGui = Lurnai.LocalPlayer:WaitForChild("PlayerGui")
Lurnai.ShecklesUI = Lurnai.PlayerGui:WaitForChild("Sheckles_UI")
Lurnai.MoneyUI = Lurnai.ShecklesUI:WaitForChild("Money")

Lurnai.InventoryValueUI = Lurnai.MoneyUI:Clone()
Lurnai.InventoryValueUI.Name = "InventoryValue"
Lurnai.InventoryValueUI.Parent = Lurnai.ShecklesUI

local originalPosition = Lurnai.MoneyUI.Position
Lurnai.MoneyUI.Position =
    UDim2.new(
    originalPosition.X.Scale,
    originalPosition.X.Offset,
    originalPosition.Y.Scale,
    originalPosition.Y.Offset - 50
)

Lurnai.InventoryValueUI.Position =
    UDim2.new(
    originalPosition.X.Scale,
    originalPosition.X.Offset,
    originalPosition.Y.Scale,
    originalPosition.Y.Offset - 36
)

Lurnai.Item_Module = require(ReplicatedStorage.Item_Module)
Lurnai.MutationHandler = require(ReplicatedStorage.Modules.MutationHandler)
Lurnai.PetUtilities = require(ReplicatedStorage.Modules.PetServices.PetUtilities)
Lurnai.PetRegistry = require(ReplicatedStorage.Data.PetRegistry)
Lurnai.NumberUtil = require(ReplicatedStorage.Modules.NumberUtil)
Lurnai.DataService = require(ReplicatedStorage.Modules.DataService)

function Lurnai.CalculatePlantValue(plant)
    local itemString = plant:FindFirstChild("Item_String")
    if not itemString then
        return 0
    end

    local variant = plant:FindFirstChild("Variant")
    if not variant then
        return 0
    end

    local weight = plant:FindFirstChild("Weight")
    if not weight then
        return 0
    end

    local itemData = Lurnai.Item_Module.Return_Data(itemString.Value)
    if not itemData or #itemData < 3 then
        return 0
    end

    local baseValue = itemData[3]
    local weightRequirement = itemData[2]
    local variantMultiplier = Lurnai.Item_Module.Return_Multiplier(variant.Value)
    local mutationMultiplier = Lurnai.MutationHandler:CalcValueMulti(plant)
    local plantValue = baseValue * mutationMultiplier * variantMultiplier
    local weightRatio = math.clamp(weight.Value / weightRequirement, 0.95, 100000000)
    local finalValue = plantValue * (weightRatio * weightRatio)

    return math.round(finalValue)
end

function Lurnai.CalculatePetValue(petTool)
    if not petTool then
        return 0
    end

    local itemType = petTool:GetAttribute("ItemType")
    if itemType ~= "Pet" then
        return 0
    end

    local petUUID = petTool:GetAttribute("PET_UUID")
    if not petUUID then
        return 0
    end

    local success, playerData =
        pcall(
        function()
            return Lurnai.DataService:GetData()
        end
    )

    if not success or not playerData then
        return 0
    end

    local petData = playerData.PetsData.PetInventory.Data[petUUID]
    if not petData then
        return 0
    end

    local hatchedFrom = petData.PetData.HatchedFrom
    if not hatchedFrom or hatchedFrom == "" then
        return 0
    end

    local eggData = Lurnai.PetRegistry.PetEggs[hatchedFrom]
    if not eggData then
        return 0
    end

    local petTypeData = eggData.RarityData.Items[petData.PetType]
    if not petTypeData then
        return 0
    end

    local weightRange = petTypeData.GeneratedPetData.WeightRange
    if not weightRange then
        return 0
    end

    local weightProgress = Lurnai.NumberUtil.ReverseLerp(weightRange[1], weightRange[2], petData.PetData.BaseWeight)
    local weightMultiplier = math.lerp(0.8, 1.2, weightProgress)

    local levelProgress = Lurnai.PetUtilities:GetLevelProgress(petData.PetData.Level)
    local levelMultiplier = math.lerp(0.15, 6, levelProgress)

    local baseSellPrice = Lurnai.PetRegistry.PetList[petData.PetType].SellPrice
    local finalValue = baseSellPrice * weightMultiplier * levelMultiplier

    return math.floor(finalValue)
end

function Lurnai.FormatNumber(num)
    local formatted = tostring(num)
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then
            break
        end
    end
    return formatted
end

function Lurnai.CalculateHeldItemValue()
    local character = Lurnai.LocalPlayer.Character
    if not character then
        return 0
    end

    local tool = character:FindFirstChildOfClass("Tool")
    if not tool then
        return 0
    end

    if tool:FindFirstChild("Item_String") then
        return Lurnai.CalculatePlantValue(tool)
    end

    if tool:GetAttribute("ItemType") == "Pet" then
        return Lurnai.CalculatePetValue(tool)
    end

    return 0
end

function Lurnai.CalculateInventoryValue()
    local backpack = Lurnai.LocalPlayer:FindFirstChild("Backpack")
    if not backpack then
        return 0
    end

    local totalValue = 0

    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            if tool:FindFirstChild("Item_String") then
                totalValue = totalValue + Lurnai.CalculatePlantValue(tool)
            end

            if tool:GetAttribute("ItemType") == "Pet" then
                totalValue = totalValue + Lurnai.CalculatePetValue(tool)
            end
        end
    end

    local character = Lurnai.LocalPlayer.Character
    if character then
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool then
            if equippedTool:FindFirstChild("Item_String") then
                totalValue = totalValue + Lurnai.CalculatePlantValue(equippedTool)
            end

            if equippedTool:GetAttribute("ItemType") == "Pet" then
                totalValue = totalValue + Lurnai.CalculatePetValue(equippedTool)
            end
        end
    end

    return totalValue
end

function Lurnai.UpdateHeldItemDisplay()
    local value = Lurnai.CalculateHeldItemValue()

    if value > 0 then
        Lurnai.MoneyUI.Text = "Worth: $" .. Lurnai.FormatNumber(value)
        Lurnai.MoneyUI.Visible = true
    else
        Lurnai.MoneyUI.Visible = false
    end
end

function Lurnai.UpdateInventoryDisplay()
    local totalValue = Lurnai.CalculateInventoryValue()

    if totalValue > 0 then
        Lurnai.InventoryValueUI.Text = "Inventory: $" .. Lurnai.FormatNumber(totalValue)
        Lurnai.InventoryValueUI.Visible = true
    else
        Lurnai.InventoryValueUI.Text = "Inventory: $0"
        Lurnai.InventoryValueUI.Visible = true
    endu
end

Lurnai.MoneyUI.Visible = false
Lurnai.InventoryValueUI.Visible = true

Lurnai.connection =
    RunService.Heartbeat:Connect(
    function()
        Lurnai.UpdateHeldItemDisplay()
        Lurnai.UpdateInventoryDisplay()
    end
)

local backpack = Lurnai.LocalPlayer:WaitForChild("Backpack")
backpack.ChildAdded:Connect(Lurnai.UpdateInventoryDisplay)
backpack.ChildRemoved:Connect(Lurnai.UpdateInventoryDisplay)

Lurnai.LocalPlayer.CharacterAdded:Connect(
    function(character)
        character.ChildAdded:Connect(Lurnai.UpdateInventoryDisplay)
        character.ChildRemoved:Connect(Lurnai.UpdateInventoryDisplay)
    end
)

Lurnai.PlayerRemoving =
    Players.PlayerRemoving:Connect(
    function(player)
        if player == Lurnai.LocalPlayer then
            Lurnai.connection:Disconnect()
        end
    end
)
   end,
})

local Button = MainTab:CreateButton({
   Name = "Fruit Value",
   Callback = function()
   local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local CalculatePlantValue = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("CalculatePlantValue"))
local Comma = require(ReplicatedStorage:WaitForChild("Comma_Module"))

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local ESPs = {}
local UpdateQueue = {}
local RANGE = 50 


local function createBillboard(model)
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "esp"
	billboard.Size = UDim2.new(0, 100, 0, 20)
	billboard.StudsOffset = Vector3.new(0, 3, 0)
	billboard.AlwaysOnTop = true
	billboard.LightInfluence = 0
	billboard.ResetOnSpawn = false
	billboard.Parent = model

	local label = Instance.new("TextLabel")
	label.Name = "money"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.fromRGB(255, 255, 0)
	label.TextStrokeTransparency = 0.5
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.Font = Enum.Font.GothamBold
	label.TextScaled = true
	label.Text = "..."
	label.Parent = billboard

	return billboard
end

local function updateESP(model)
	local esp = ESPs[model]
	if not esp or not model:IsDescendantOf(workspace) then return end
	local label = esp:FindFirstChild("money")
	if label then
		local success, value = pcall(CalculatePlantValue, model)
		if success and typeof(value) == "number" then
			label.Text = Comma.Comma(value) .. "√Ç¬¢"
		end
	end
end

local function trackPlant(model)
	if ESPs[model] then return end
	UpdateQueue[model] = tick() + math.random()
end

local function untrackPlant(model)
	if ESPs[model] then
		ESPs[model]:Destroy()
		ESPs[model] = nil
	end
	UpdateQueue[model] = nil
end

local function createesp(model)
	if ESPs[model] then return end
	if not model:IsDescendantOf(workspace) then return end
	local part = model:FindFirstChildWhichIsA("BasePart")
	if not part then return end
	if (part.Position - RootPart.Position).Magnitude <= RANGE then
		local esp = createBillboard(model)
		ESPs[model] = esp
		updateESP(model)
	end
end

local function removeesp(model)
	local esp = ESPs[model]
	if esp and model:IsDescendantOf(workspace) then
		local part = model:FindFirstChildWhichIsA("BasePart")
		if part and (part.Position - RootPart.Position).Magnitude > RANGE + 10 then
			esp:Destroy()
			ESPs[model] = nil
		end
	end
end

for _, obj in ipairs(workspace:GetDescendants()) do
	if obj:IsA("Model") and CollectionService:HasTag(obj, "Harvestable") then
		trackPlant(obj)
	end
end

CollectionService:GetInstanceAddedSignal("Harvestable"):Connect(function(obj)
	if obj:IsA("Model") then
		trackPlant(obj)
	end
end)

CollectionService:GetInstanceRemovedSignal("Harvestable"):Connect(function(obj)
	if obj:IsA("Model") then
		untrackPlant(obj)
	end
end)

task.spawn(function()
	while true do
		local now = tick()
		for model, _ in pairs(UpdateQueue) do
			if not model:IsDescendantOf(workspace) then
				untrackPlant(model)
			else
				createesp(model)
				removeesp(model)
				if ESPs[model] and now >= UpdateQueue[model] then
					updateESP(model)
					UpdateQueue[model] = now + 3 + math.random()
				end
			end
		end
		task.wait(0.3)
	end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
	Character = char
	RootPart = char:WaitForChild("HumanoidRootPart")
end)
   end,


})
local Button = Misc:CreateButton({
   Name = "InfiniteYeld",
   Callback = function()
   loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
   end,
})

local Button = Shop:CreateButton({
   Name = "Seed Shop",
   Callback = function()
local rs = game:GetService("ReplicatedStorage")
local cs = game:GetService("CollectionService")
local plrs = game:GetService("Players")
local rsRun = game:GetService("RunService")

local lp = plrs.LocalPlayer
local cam = workspace.CurrentCamera

local fnHatch = getupvalue(getupvalue(getconnections(rs.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local eggList = getupvalue(fnHatch, 1)
local petList = getupvalue(fnHatch, 2)

local labelCache = {}
local trackedEggs = {}

local function findEggById(uuid)
    for egg in eggList do
        if egg:GetAttribute("OBJECT_UUID") ~= uuid then continue end
        return egg
    end
end

local function refreshLabel(uuid, pet)
    local model = findEggById(uuid)
    if not model or not labelCache[uuid] then return end

    local eggType = model:GetAttribute("EggName")
    labelCache[uuid].Text = `{eggType} | {pet}`
end

local function createLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end

    local eggType = model:GetAttribute("EggName")
    local pet = petList[model:GetAttribute("OBJECT_UUID")]
    local uuid = model:GetAttribute("OBJECT_UUID")
    if not uuid then return end

    local txt = Drawing.new("Text")
    txt.Text = `{eggType} | {pet or "?"}`
    txt.Size = 18
    txt.Color = Color3.new(1, 1, 1)
    txt.Outline = true
    txt.OutlineColor = Color3.new(0, 0, 0)
    txt.Center = true
    txt.Visible = false

    labelCache[uuid] = txt
    trackedEggs[uuid] = model
end

local function removeLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end

    local uuid = model:GetAttribute("OBJECT_UUID")
    if labelCache[uuid] then
        labelCache[uuid]:Remove()
        labelCache[uuid] = nil
    end

    trackedEggs[uuid] = nil
end

local function updateLabels()
    for uuid, model in trackedEggs do
        if not model or not model:IsDescendantOf(workspace) then
            trackedEggs[uuid] = nil
            if labelCache[uuid] then
                labelCache[uuid].Visible = false
            end
            continue
        end

        local lbl = labelCache[uuid]
        if lbl then
            local pos, visible = cam:WorldToViewportPoint(model:GetPivot().Position)
            lbl.Position = Vector2.new(pos.X, pos.Y)
            lbl.Visible = visible
        end
    end
end

for _, inst in cs:GetTagged("PetEggServer") do
    task.spawn(createLabel, inst)
end

cs:GetInstanceAddedSignal("PetEggServer"):Connect(createLabel)
cs:GetInstanceRemovedSignal("PetEggServer"):Connect(removeLabel)

local original; original = hookfunction(getconnections(rs.GameEvents.EggReadyToHatch_RE.OnClientEvent)[1].Function, newcclosure(function(uuid, pet)
    refreshLabel(uuid, pet)
    return original(uuid, pet)
end))

rsRun.PreRender:Connect(updateLabels)
   end,
})

local Button = Shop:CreateButton({
   Name = "Seed Shop",
   Callback = function()
local onoffgui1 = false 
onoffgui1 = true --settings value and true false 
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local seedShopGui = playerGui:WaitForChild("Seed_Shop")
local timerLabel = seedShopGui:WaitForChild("Frame"):WaitForChild("Frame"):WaitForChild("Timer")

local displayGui = Instance.new("ScreenGui")
displayGui.Name = "SeedTimerDisplay"
displayGui.ResetOnSpawn = false
displayGui.Parent = playerGui


local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0, 80, 0, 60)
textLabel.Position = UDim2.new(0.5, -110, 0.1, 0)
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextScaled = true
textLabel.Font = Enum.Font.SourceSansBold
textLabel.Text = "Loading..."
textLabel.Active = true
textLabel.Draggable = true
textLabel.Visible = onoffgui1
textLabel.Parent = displayGui

game:GetService("RunService").RenderStepped:Connect(function()
    if onoffgui1 and timerLabel and timerLabel:IsA("TextLabel") then
        textLabel.Visible = true
        textLabel.Text = "" .. timerLabel.Text
    else
        textLabel.Visible = false
    end
end)
   end,
})


local Button = MainTab:CreateButton({
   Name = "Egg Prediction",
   Callback = function()
local rs = game:GetService("ReplicatedStorage")
local cs = game:GetService("CollectionService")
local plrs = game:GetService("Players")
local rsRun = game:GetService("RunService")

local lp = plrs.LocalPlayer
local cam = workspace.CurrentCamera

local fnHatch = getupvalue(getupvalue(getconnections(rs.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local eggList = getupvalue(fnHatch, 1)
local petList = getupvalue(fnHatch, 2)

local labelCache = {}
local trackedEggs = {}

local function findEggById(uuid)
    for egg in eggList do
        if egg:GetAttribute("OBJECT_UUID") ~= uuid then continue end
        return egg
    end
end

local function refreshLabel(uuid, pet)
    local model = findEggById(uuid)
    if not model or not labelCache[uuid] then return end

    local eggType = model:GetAttribute("EggName")
    labelCache[uuid].Text = `{eggType} | {pet}`
end

local function createLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end

    local eggType = model:GetAttribute("EggName")
    local pet = petList[model:GetAttribute("OBJECT_UUID")]
    local uuid = model:GetAttribute("OBJECT_UUID")
    if not uuid then return end

    local txt = Drawing.new("Text")
    txt.Text = `{eggType} | {pet or "?"}`
    txt.Size = 23
    txt.Color = Color3.new(1, 1, 1)
    txt.Outline = true
    txt.OutlineColor = Color3.new(0, 0, 0)
    txt.Center = true
    txt.Visible = false

    labelCache[uuid] = txt
    trackedEggs[uuid] = model
end

local function removeLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end

    local uuid = model:GetAttribute("OBJECT_UUID")
    if labelCache[uuid] then
        labelCache[uuid]:Remove()
        labelCache[uuid] = nil
    end

    trackedEggs[uuid] = nil
end

local function updateLabels()
    for uuid, model in trackedEggs do
        if not model or not model:IsDescendantOf(workspace) then
            trackedEggs[uuid] = nil
            if labelCache[uuid] then
                labelCache[uuid].Visible = false
            end
            continue
        end

        local lbl = labelCache[uuid]
        if lbl then
            local pos, visible = cam:WorldToViewportPoint(model:GetPivot().Position)
            lbl.Position = Vector2.new(pos.X, pos.Y)
            lbl.Visible = visible
        end
    end
end

for _, inst in cs:GetTagged("PetEggServer") do
    task.spawn(createLabel, inst)
end

cs:GetInstanceAddedSignal("PetEggServer"):Connect(createLabel)
cs:GetInstanceRemovedSignal("PetEggServer"):Connect(removeLabel)

local original; original = hookfunction(getconnections(rs.GameEvents.EggReadyToHatch_RE.OnClientEvent)[1].Function, newcclosure(function(uuid, pet)
    refreshLabel(uuid, pet)
    return original(uuid, pet)
end))

rsRun.PreRender:Connect(updateLabels)
   end,
})
