local Euna = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Euna:CreateWindow({
   Name = "EUNA HUB",
   LoadingTitle = "EUNA HUB",
   LoadingSubtitle = "By: Eunaa",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "ZIRP Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Euna may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Euna to get the key from
      Key = {"Hotdog"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè° Home", nil) -- Title, Image
local Auto = Window:CreateTab("üîÅAuto", nil) -- Title, Image
local Wala = Window:CreateTab("Wla", nil) -- Title, Image
local Gapo = Window:CreateTab("gapo", nil) -- Title, Image
Euna:Notify({
   Title = "Executed Successfully!",
   Content = "Press X to Turn ON",
   Duration = 8.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
         print("The user tapped Okey!")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "InfiniteYeld",
   Callback = function()
   loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
   end,
})


local Button = Auto:CreateButton({
   Name = "Egg Prediction",
   Callback = function()
local rs = game:GetService("ReplicatedStorage")
local cs = game:GetService("CollectionService")
local plrs = game:GetService("Players")
local rsRun = game:GetService("RunService")

local lp = plrs.LocalPlayer
local cam = workspace.CurrentCamera

local fnHatch = getupvalue(getupvalue(getconnections(rs.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
local eggList = getupvalue(fnHatch, 1)
local petList = getupvalue(fnHatch, 2)

local labelCache = {}
local trackedEggs = {}

local function findEggById(uuid)
    for egg in eggList do
        if egg:GetAttribute("OBJECT_UUID") ~= uuid then continue end
        return egg
    end
end

local function refreshLabel(uuid, pet)
    local model = findEggById(uuid)
    if not model or not labelCache[uuid] then return end

    local eggType = model:GetAttribute("EggName")
    labelCache[uuid].Text = `{eggType} | {pet}`
end

local function createLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end

    local eggType = model:GetAttribute("EggName")
    local pet = petList[model:GetAttribute("OBJECT_UUID")]
    local uuid = model:GetAttribute("OBJECT_UUID")
    if not uuid then return end

    local txt = Drawing.new("Text")
    txt.Text = `{eggType} | {pet or "?"}`
    txt.Size = 18
    txt.Color = Color3.new(1, 1, 1)
    txt.Outline = true
    txt.OutlineColor = Color3.new(0, 0, 0)
    txt.Center = true
    txt.Visible = false

    labelCache[uuid] = txt
    trackedEggs[uuid] = model
end

local function removeLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end

    local uuid = model:GetAttribute("OBJECT_UUID")
    if labelCache[uuid] then
        labelCache[uuid]:Remove()
        labelCache[uuid] = nil
    end

    trackedEggs[uuid] = nil
end

local function updateLabels()
    for uuid, model in trackedEggs do
        if not model or not model:IsDescendantOf(workspace) then
            trackedEggs[uuid] = nil
            if labelCache[uuid] then
                labelCache[uuid].Visible = false
            end
            continue
        end

        local lbl = labelCache[uuid]
        if lbl then
            local pos, visible = cam:WorldToViewportPoint(model:GetPivot().Position)
            lbl.Position = Vector2.new(pos.X, pos.Y)
            lbl.Visible = visible
        end
    end
end

for _, inst in cs:GetTagged("PetEggServer") do
    task.spawn(createLabel, inst)
end

cs:GetInstanceAddedSignal("PetEggServer"):Connect(createLabel)
cs:GetInstanceRemovedSignal("PetEggServer"):Connect(removeLabel)

local original; original = hookfunction(getconnections(rs.GameEvents.EggReadyToHatch_RE.OnClientEvent)[1].Function, newcclosure(function(uuid, pet)
    refreshLabel(uuid, pet)
    return original(uuid, pet)
end))

rsRun.PreRender:Connect(updateLabels)
   end,
})
local Button = Wala:CreateButton({
   Name = "World 2",
   Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(5000, 99, -63)
wait(1)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4999, 14426, -118)
wait(1.5)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(5002, 14397, -60)
wait(1)
   end,
})
